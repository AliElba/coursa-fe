/* tslint:disable */
/* eslint-disable */
/**
 * Coursa API
 * API documentation for Coursa backend
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CourseDto } from '../models';
// @ts-ignore
import type { StripeCheckoutSessionDto } from '../models';
// @ts-ignore
import type { UserCourseDto } from '../models';
/**
 * CoursesApi - axios parameter creator
 * @export
 */
export const CoursesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Change the status of a user course from PENDING to ACTIVE
         * @summary Activate user course
         * @param {number} id UserCourse ID to activate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        activateCourse: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('activateCourse', 'id', id)
            const localVarPath = `/my-courses/{id}/activate`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a Stripe Checkout session for the specified course and return the session URL.
         * @summary Create Stripe Checkout session
         * @param {number} id Course ID to purchase
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createStripeCheckoutSession: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('createStripeCheckoutSession', 'id', id)
            const localVarPath = `/courses/{id}/checkout-session`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a list of all available courses in the platform
         * @summary Get all courses
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllCourses: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/courses`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get course details by ID
         * @param {number} id Course ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCourseById: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getCourseById', 'id', id)
            const localVarPath = `/courses/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve all courses that the authenticated user is registered for
         * @summary Get user courses
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyCourses: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/my-courses`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Register the authenticated user for a specific course with PENDING status
         * @summary Register for a course
         * @param {number} id Course ID to register for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerCourse: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('registerCourse', 'id', id)
            const localVarPath = `/courses/{id}/register`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CoursesApi - functional programming interface
 * @export
 */
export const CoursesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CoursesApiAxiosParamCreator(configuration)
    return {
        /**
         * Change the status of a user course from PENDING to ACTIVE
         * @summary Activate user course
         * @param {number} id UserCourse ID to activate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async activateCourse(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.activateCourse(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CoursesApi.activateCourse']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Create a Stripe Checkout session for the specified course and return the session URL.
         * @summary Create Stripe Checkout session
         * @param {number} id Course ID to purchase
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createStripeCheckoutSession(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StripeCheckoutSessionDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createStripeCheckoutSession(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CoursesApi.createStripeCheckoutSession']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve a list of all available courses in the platform
         * @summary Get all courses
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllCourses(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CourseDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllCourses(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CoursesApi.getAllCourses']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get course details by ID
         * @param {number} id Course ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCourseById(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CourseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCourseById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CoursesApi.getCourseById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve all courses that the authenticated user is registered for
         * @summary Get user courses
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMyCourses(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserCourseDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMyCourses(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CoursesApi.getMyCourses']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Register the authenticated user for a specific course with PENDING status
         * @summary Register for a course
         * @param {number} id Course ID to register for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async registerCourse(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.registerCourse(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CoursesApi.registerCourse']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CoursesApi - factory interface
 * @export
 */
export const CoursesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CoursesApiFp(configuration)
    return {
        /**
         * Change the status of a user course from PENDING to ACTIVE
         * @summary Activate user course
         * @param {number} id UserCourse ID to activate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        activateCourse(id: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.activateCourse(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a Stripe Checkout session for the specified course and return the session URL.
         * @summary Create Stripe Checkout session
         * @param {number} id Course ID to purchase
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createStripeCheckoutSession(id: number, options?: RawAxiosRequestConfig): AxiosPromise<StripeCheckoutSessionDto> {
            return localVarFp.createStripeCheckoutSession(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a list of all available courses in the platform
         * @summary Get all courses
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllCourses(options?: RawAxiosRequestConfig): AxiosPromise<Array<CourseDto>> {
            return localVarFp.getAllCourses(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get course details by ID
         * @param {number} id Course ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCourseById(id: number, options?: RawAxiosRequestConfig): AxiosPromise<CourseDto> {
            return localVarFp.getCourseById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve all courses that the authenticated user is registered for
         * @summary Get user courses
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyCourses(options?: RawAxiosRequestConfig): AxiosPromise<Array<UserCourseDto>> {
            return localVarFp.getMyCourses(options).then((request) => request(axios, basePath));
        },
        /**
         * Register the authenticated user for a specific course with PENDING status
         * @summary Register for a course
         * @param {number} id Course ID to register for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerCourse(id: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.registerCourse(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CoursesApi - object-oriented interface
 * @export
 * @class CoursesApi
 * @extends {BaseAPI}
 */
export class CoursesApi extends BaseAPI {
    /**
     * Change the status of a user course from PENDING to ACTIVE
     * @summary Activate user course
     * @param {number} id UserCourse ID to activate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoursesApi
     */
    public activateCourse(id: number, options?: RawAxiosRequestConfig) {
        return CoursesApiFp(this.configuration).activateCourse(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a Stripe Checkout session for the specified course and return the session URL.
     * @summary Create Stripe Checkout session
     * @param {number} id Course ID to purchase
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoursesApi
     */
    public createStripeCheckoutSession(id: number, options?: RawAxiosRequestConfig) {
        return CoursesApiFp(this.configuration).createStripeCheckoutSession(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a list of all available courses in the platform
     * @summary Get all courses
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoursesApi
     */
    public getAllCourses(options?: RawAxiosRequestConfig) {
        return CoursesApiFp(this.configuration).getAllCourses(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get course details by ID
     * @param {number} id Course ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoursesApi
     */
    public getCourseById(id: number, options?: RawAxiosRequestConfig) {
        return CoursesApiFp(this.configuration).getCourseById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve all courses that the authenticated user is registered for
     * @summary Get user courses
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoursesApi
     */
    public getMyCourses(options?: RawAxiosRequestConfig) {
        return CoursesApiFp(this.configuration).getMyCourses(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Register the authenticated user for a specific course with PENDING status
     * @summary Register for a course
     * @param {number} id Course ID to register for
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoursesApi
     */
    public registerCourse(id: number, options?: RawAxiosRequestConfig) {
        return CoursesApiFp(this.configuration).registerCourse(id, options).then((request) => request(this.axios, this.basePath));
    }
}

